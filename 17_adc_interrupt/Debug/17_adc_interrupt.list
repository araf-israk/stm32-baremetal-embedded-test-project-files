
17_adc_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000354  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004ec  080004f4  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004ec  080004ec  000014f4  2**0
                  CONTENTS
  4 .ARM          00000000  080004ec  080004ec  000014f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004ec  080004f4  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ec  080004ec  000014ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004f0  080004f0  000014f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004f4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004f4  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000de6  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000041c  00000000  00000000  0000230a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  00002728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000009c  00000000  00000000  00002810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eac4  00000000  00000000  000028ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014b4  00000000  00000000  00011370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005375e  00000000  00000000  00012824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00065f82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000248  00000000  00000000  00065fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00066210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004d4 	.word	0x080004d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080004d4 	.word	0x080004d4

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <pa1_adc_interrupt_init>:
#define CR2_ADCON 	(1U<<0)
#define CR2_SWSTART (1U<<30)
#define CR2_CONT 	(1U<<1)
#define CR1_EOCIE 	(1U<<5)

void pa1_adc_interrupt_init(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	/***Configure the ADC GPIO pin***/

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000218:	4b17      	ldr	r3, [pc, #92]	@ (8000278 <pa1_adc_interrupt_init+0x64>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021c:	4a16      	ldr	r2, [pc, #88]	@ (8000278 <pa1_adc_interrupt_init+0x64>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA1 to analog*/
	GPIOA->MODER |= (1U<<2);
 8000224:	4b15      	ldr	r3, [pc, #84]	@ (800027c <pa1_adc_interrupt_init+0x68>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a14      	ldr	r2, [pc, #80]	@ (800027c <pa1_adc_interrupt_init+0x68>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 8000230:	4b12      	ldr	r3, [pc, #72]	@ (800027c <pa1_adc_interrupt_init+0x68>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a11      	ldr	r2, [pc, #68]	@ (800027c <pa1_adc_interrupt_init+0x68>)
 8000236:	f043 0308 	orr.w	r3, r3, #8
 800023a:	6013      	str	r3, [r2, #0]

	/***Configure the ADC module***/

	/*Enable clock access to ADC*/
	RCC->APB2ENR |= ADC1EN;
 800023c:	4b0e      	ldr	r3, [pc, #56]	@ (8000278 <pa1_adc_interrupt_init+0x64>)
 800023e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000240:	4a0d      	ldr	r2, [pc, #52]	@ (8000278 <pa1_adc_interrupt_init+0x64>)
 8000242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000246:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Enable ADC end of conversion interrupt*/
	ADC1->CR1 |= CR1_EOCIE;
 8000248:	4b0d      	ldr	r3, [pc, #52]	@ (8000280 <pa1_adc_interrupt_init+0x6c>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4a0c      	ldr	r2, [pc, #48]	@ (8000280 <pa1_adc_interrupt_init+0x6c>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6053      	str	r3, [r2, #4]

	/*Enable ADC interrupt in NVIC*/
	NVIC_EnableIRQ(ADC_IRQn);
 8000254:	2012      	movs	r0, #18
 8000256:	f7ff ffbf 	bl	80001d8 <__NVIC_EnableIRQ>

	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 800025a:	4b09      	ldr	r3, [pc, #36]	@ (8000280 <pa1_adc_interrupt_init+0x6c>)
 800025c:	2201      	movs	r2, #1
 800025e:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Conversion sequence length*/
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000260:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <pa1_adc_interrupt_init+0x6c>)
 8000262:	2200      	movs	r2, #0
 8000264:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |= CR2_ADCON;
 8000266:	4b06      	ldr	r3, [pc, #24]	@ (8000280 <pa1_adc_interrupt_init+0x6c>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	4a05      	ldr	r2, [pc, #20]	@ (8000280 <pa1_adc_interrupt_init+0x6c>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	6093      	str	r3, [r2, #8]
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40023800 	.word	0x40023800
 800027c:	40020000 	.word	0x40020000
 8000280:	40012000 	.word	0x40012000

08000284 <start_conversion>:
	/*Enable ADC module*/
	ADC1->CR2 |= CR2_ADCON;
}


void start_conversion(void){
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0

	/*Enable continuous conversion*/
	ADC1->CR2 |= CR2_CONT;
 8000288:	4b08      	ldr	r3, [pc, #32]	@ (80002ac <start_conversion+0x28>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	4a07      	ldr	r2, [pc, #28]	@ (80002ac <start_conversion+0x28>)
 800028e:	f043 0302 	orr.w	r3, r3, #2
 8000292:	6093      	str	r3, [r2, #8]

	/*Start adc conversion*/
	ADC1->CR2 |= CR2_SWSTART;
 8000294:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <start_conversion+0x28>)
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	4a04      	ldr	r2, [pc, #16]	@ (80002ac <start_conversion+0x28>)
 800029a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800029e:	6093      	str	r3, [r2, #8]
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40012000 	.word	0x40012000

080002b0 <main>:


uint32_t sensor_reading;
static void adc_callback(void);

int main(void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0


	uart2_rxtx_init();
 80002b4:	f000 f82a 	bl	800030c <uart2_rxtx_init>
	pa1_adc_interrupt_init();
 80002b8:	f7ff ffac 	bl	8000214 <pa1_adc_interrupt_init>
	start_conversion();
 80002bc:	f7ff ffe2 	bl	8000284 <start_conversion>

	while(1){
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <main+0x10>

080002c4 <adc_callback>:


	}
}

static void adc_callback(void){
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
	sensor_reading = ADC1->DR;
 80002c8:	4b04      	ldr	r3, [pc, #16]	@ (80002dc <adc_callback+0x18>)
 80002ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002cc:	4a04      	ldr	r2, [pc, #16]	@ (80002e0 <adc_callback+0x1c>)
 80002ce:	6013      	str	r3, [r2, #0]
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40012000 	.word	0x40012000
 80002e0:	2000001c 	.word	0x2000001c

080002e4 <ADC_IRQHandler>:

void ADC_IRQHandler(void){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	/*Check for EOC in SR*/
	if((ADC1->SR & SR_EOC) != 0){
 80002e8:	4b07      	ldr	r3, [pc, #28]	@ (8000308 <ADC_IRQHandler+0x24>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f003 0302 	and.w	r3, r3, #2
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d007      	beq.n	8000304 <ADC_IRQHandler+0x20>
		/*Clear EOC*/
		ADC1->SR &= ~SR_EOC;
 80002f4:	4b04      	ldr	r3, [pc, #16]	@ (8000308 <ADC_IRQHandler+0x24>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a03      	ldr	r2, [pc, #12]	@ (8000308 <ADC_IRQHandler+0x24>)
 80002fa:	f023 0302 	bic.w	r3, r3, #2
 80002fe:	6013      	str	r3, [r2, #0]

		adc_callback();
 8000300:	f7ff ffe0 	bl	80002c4 <adc_callback>
	}
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40012000 	.word	0x40012000

0800030c <uart2_rxtx_init>:
int __io_putchar(int ch){
	uart2_write(ch);
	return ch;
}

void uart2_rxtx_init(void){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	/******************Configure uart gpio pin*********************/
	/*Enable Clock access to gpioa*/
	RCC->AHB1ENR |= GPIOAEN;
 8000310:	4b32      	ldr	r3, [pc, #200]	@ (80003dc <uart2_rxtx_init+0xd0>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000314:	4a31      	ldr	r2, [pc, #196]	@ (80003dc <uart2_rxtx_init+0xd0>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &= ~(1U<<4);
 800031c:	4b30      	ldr	r3, [pc, #192]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a2f      	ldr	r2, [pc, #188]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 8000322:	f023 0310 	bic.w	r3, r3, #16
 8000326:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<5);
 8000328:	4b2d      	ldr	r3, [pc, #180]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a2c      	ldr	r2, [pc, #176]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 8000334:	4b2a      	ldr	r3, [pc, #168]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 8000336:	6a1b      	ldr	r3, [r3, #32]
 8000338:	4a29      	ldr	r2, [pc, #164]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 800033a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800033e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000340:	4b27      	ldr	r3, [pc, #156]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	4a26      	ldr	r2, [pc, #152]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 8000346:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800034a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 800034c:	4b24      	ldr	r3, [pc, #144]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 800034e:	6a1b      	ldr	r3, [r3, #32]
 8000350:	4a23      	ldr	r2, [pc, #140]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 8000352:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000356:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000358:	4b21      	ldr	r3, [pc, #132]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 800035a:	6a1b      	ldr	r3, [r3, #32]
 800035c:	4a20      	ldr	r2, [pc, #128]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 800035e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000362:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &= ~(1U<<6);
 8000364:	4b1e      	ldr	r3, [pc, #120]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a1d      	ldr	r2, [pc, #116]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 800036a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800036e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<7);
 8000370:	4b1b      	ldr	r3, [pc, #108]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a1a      	ldr	r2, [pc, #104]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 8000376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800037a:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0] |= (1U<<12);
 800037c:	4b18      	ldr	r3, [pc, #96]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 800037e:	6a1b      	ldr	r3, [r3, #32]
 8000380:	4a17      	ldr	r2, [pc, #92]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 8000382:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000386:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000388:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 800038a:	6a1b      	ldr	r3, [r3, #32]
 800038c:	4a14      	ldr	r2, [pc, #80]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 800038e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000392:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 8000394:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 8000396:	6a1b      	ldr	r3, [r3, #32]
 8000398:	4a11      	ldr	r2, [pc, #68]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 800039a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800039e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 80003a0:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	4a0e      	ldr	r2, [pc, #56]	@ (80003e0 <uart2_rxtx_init+0xd4>)
 80003a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80003aa:	6213      	str	r3, [r2, #32]

	/******************Configure uart module*********************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 80003ac:	4b0b      	ldr	r3, [pc, #44]	@ (80003dc <uart2_rxtx_init+0xd0>)
 80003ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003b0:	4a0a      	ldr	r2, [pc, #40]	@ (80003dc <uart2_rxtx_init+0xd0>)
 80003b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003b6:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baudrate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80003b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003bc:	4909      	ldr	r1, [pc, #36]	@ (80003e4 <uart2_rxtx_init+0xd8>)
 80003be:	480a      	ldr	r0, [pc, #40]	@ (80003e8 <uart2_rxtx_init+0xdc>)
 80003c0:	f000 f814 	bl	80003ec <uart_set_baudrate>

	/*Configure the transfer direction */
	USART2->CR1 = (CR1_TE | CR1_RE);
 80003c4:	4b08      	ldr	r3, [pc, #32]	@ (80003e8 <uart2_rxtx_init+0xdc>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	60da      	str	r2, [r3, #12]

	/*Enable the uart module */
	USART2->CR1 |= CR1_UE;
 80003ca:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <uart2_rxtx_init+0xdc>)
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	4a06      	ldr	r2, [pc, #24]	@ (80003e8 <uart2_rxtx_init+0xdc>)
 80003d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003d4:	60d3      	str	r3, [r2, #12]

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40020000 	.word	0x40020000
 80003e4:	00f42400 	.word	0x00f42400
 80003e8:	40004400 	.word	0x40004400

080003ec <uart_set_baudrate>:

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80003f8:	6879      	ldr	r1, [r7, #4]
 80003fa:	68b8      	ldr	r0, [r7, #8]
 80003fc:	f000 f808 	bl	8000410 <compute_uart_bd>
 8000400:	4603      	mov	r3, r0
 8000402:	461a      	mov	r2, r3
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	609a      	str	r2, [r3, #8]
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	085a      	lsrs	r2, r3, #1
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	441a      	add	r2, r3
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	fbb2 f3f3 	udiv	r3, r2, r3
 8000428:	b29b      	uxth	r3, r3
}
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
	...

08000438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000438:	480d      	ldr	r0, [pc, #52]	@ (8000470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800043a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800043c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000440:	480c      	ldr	r0, [pc, #48]	@ (8000474 <LoopForever+0x6>)
  ldr r1, =_edata
 8000442:	490d      	ldr	r1, [pc, #52]	@ (8000478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000444:	4a0d      	ldr	r2, [pc, #52]	@ (800047c <LoopForever+0xe>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000448:	e002      	b.n	8000450 <LoopCopyDataInit>

0800044a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800044c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044e:	3304      	adds	r3, #4

08000450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000454:	d3f9      	bcc.n	800044a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000456:	4a0a      	ldr	r2, [pc, #40]	@ (8000480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000458:	4c0a      	ldr	r4, [pc, #40]	@ (8000484 <LoopForever+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800045c:	e001      	b.n	8000462 <LoopFillZerobss>

0800045e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000460:	3204      	adds	r2, #4

08000462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000464:	d3fb      	bcc.n	800045e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000466:	f000 f811 	bl	800048c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046a:	f7ff ff21 	bl	80002b0 <main>

0800046e <LoopForever>:

LoopForever:
  b LoopForever
 800046e:	e7fe      	b.n	800046e <LoopForever>
  ldr   r0, =_estack
 8000470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800047c:	080004f4 	.word	0x080004f4
  ldr r2, =_sbss
 8000480:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000484:	20000020 	.word	0x20000020

08000488 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <BusFault_Handler>
	...

0800048c <__libc_init_array>:
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	4d0d      	ldr	r5, [pc, #52]	@ (80004c4 <__libc_init_array+0x38>)
 8000490:	4c0d      	ldr	r4, [pc, #52]	@ (80004c8 <__libc_init_array+0x3c>)
 8000492:	1b64      	subs	r4, r4, r5
 8000494:	10a4      	asrs	r4, r4, #2
 8000496:	2600      	movs	r6, #0
 8000498:	42a6      	cmp	r6, r4
 800049a:	d109      	bne.n	80004b0 <__libc_init_array+0x24>
 800049c:	4d0b      	ldr	r5, [pc, #44]	@ (80004cc <__libc_init_array+0x40>)
 800049e:	4c0c      	ldr	r4, [pc, #48]	@ (80004d0 <__libc_init_array+0x44>)
 80004a0:	f000 f818 	bl	80004d4 <_init>
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	10a4      	asrs	r4, r4, #2
 80004a8:	2600      	movs	r6, #0
 80004aa:	42a6      	cmp	r6, r4
 80004ac:	d105      	bne.n	80004ba <__libc_init_array+0x2e>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b4:	4798      	blx	r3
 80004b6:	3601      	adds	r6, #1
 80004b8:	e7ee      	b.n	8000498 <__libc_init_array+0xc>
 80004ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80004be:	4798      	blx	r3
 80004c0:	3601      	adds	r6, #1
 80004c2:	e7f2      	b.n	80004aa <__libc_init_array+0x1e>
 80004c4:	080004ec 	.word	0x080004ec
 80004c8:	080004ec 	.word	0x080004ec
 80004cc:	080004ec 	.word	0x080004ec
 80004d0:	080004f0 	.word	0x080004f0

080004d4 <_init>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	bf00      	nop
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr

080004e0 <_fini>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr
