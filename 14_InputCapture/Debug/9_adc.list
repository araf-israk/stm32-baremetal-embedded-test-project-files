
9_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000484  0800048c  0000148c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000484  08000484  0000148c  2**0
                  CONTENTS
  4 .ARM          00000000  08000484  08000484  0000148c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000484  0800048c  0000148c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000484  08000484  00001484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000488  08000488  00001488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000148c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800048c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800048c  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000961  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000327  00000000  00000000  00001e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00002148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000084  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eab0  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000140d  00000000  00000000  00010d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000532dd  00000000  00000000  00012151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006542e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001c8  00000000  00000000  00065474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0006563c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800046c 	.word	0x0800046c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800046c 	.word	0x0800046c

080001d8 <pa1_adc_init>:
#define CR2_SWSTART (1U<<30)
#define SR_EOC 		(1U<<1)



void pa1_adc_init(void){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	/***Configure the ADC GPIO pin***/

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <pa1_adc_init+0x58>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e0:	4a13      	ldr	r2, [pc, #76]	@ (8000230 <pa1_adc_init+0x58>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA1 to analog*/
	GPIOA->MODER |= (1U<<2);
 80001e8:	4b12      	ldr	r3, [pc, #72]	@ (8000234 <pa1_adc_init+0x5c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a11      	ldr	r2, [pc, #68]	@ (8000234 <pa1_adc_init+0x5c>)
 80001ee:	f043 0304 	orr.w	r3, r3, #4
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 80001f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000234 <pa1_adc_init+0x5c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000234 <pa1_adc_init+0x5c>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6013      	str	r3, [r2, #0]

	/***Configure the ADC module***/

	/*Enable clock access to ADC*/
	RCC->APB2ENR |= ADC1EN;
 8000200:	4b0b      	ldr	r3, [pc, #44]	@ (8000230 <pa1_adc_init+0x58>)
 8000202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000204:	4a0a      	ldr	r2, [pc, #40]	@ (8000230 <pa1_adc_init+0x58>)
 8000206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800020a:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 800020c:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <pa1_adc_init+0x60>)
 800020e:	2201      	movs	r2, #1
 8000210:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Conversion sequence length*/
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000212:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <pa1_adc_init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |= CR2_ADCON;
 8000218:	4b07      	ldr	r3, [pc, #28]	@ (8000238 <pa1_adc_init+0x60>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	4a06      	ldr	r2, [pc, #24]	@ (8000238 <pa1_adc_init+0x60>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6093      	str	r3, [r2, #8]
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40023800 	.word	0x40023800
 8000234:	40020000 	.word	0x40020000
 8000238:	40012000 	.word	0x40012000

0800023c <start_conversion>:


void start_conversion(void){
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0

	/*Start adc conversion*/
	ADC1->CR2 |= CR2_SWSTART;
 8000240:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <start_conversion+0x1c>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a04      	ldr	r2, [pc, #16]	@ (8000258 <start_conversion+0x1c>)
 8000246:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800024a:	6093      	str	r3, [r2, #8]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40012000 	.word	0x40012000

0800025c <adc_read>:

uint32_t adc_read(void){
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	/*Wait for conversion to be completed*/
	while(!(ADC1->SR & SR_EOC)){
 8000260:	bf00      	nop
 8000262:	4b06      	ldr	r3, [pc, #24]	@ (800027c <adc_read+0x20>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f003 0302 	and.w	r3, r3, #2
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f9      	beq.n	8000262 <adc_read+0x6>

	}

	/*Read converted result*/
	return ADC1->DR;
 800026e:	4b03      	ldr	r3, [pc, #12]	@ (800027c <adc_read+0x20>)
 8000270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c


}
 8000272:	4618      	mov	r0, r3
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	40012000 	.word	0x40012000

08000280 <main>:
#include "adc.h"


uint32_t sensor_reading;

int main(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0


	uart2_rxtx_init();
 8000284:	f000 f80e 	bl	80002a4 <uart2_rxtx_init>
	pa1_adc_init();
 8000288:	f7ff ffa6 	bl	80001d8 <pa1_adc_init>


	while(1){
		start_conversion();
 800028c:	f7ff ffd6 	bl	800023c <start_conversion>
		sensor_reading = adc_read();
 8000290:	f7ff ffe4 	bl	800025c <adc_read>
 8000294:	4603      	mov	r3, r0
 8000296:	4a02      	ldr	r2, [pc, #8]	@ (80002a0 <main+0x20>)
 8000298:	6013      	str	r3, [r2, #0]
		start_conversion();
 800029a:	bf00      	nop
 800029c:	e7f6      	b.n	800028c <main+0xc>
 800029e:	bf00      	nop
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <uart2_rxtx_init>:
int __io_putchar(int ch){
	uart2_write(ch);
	return ch;
}

void uart2_rxtx_init(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	/******************Configure uart gpio pin*********************/
	/*Enable Clock access to gpioa*/
	RCC->AHB1ENR |= GPIOAEN;
 80002a8:	4b32      	ldr	r3, [pc, #200]	@ (8000374 <uart2_rxtx_init+0xd0>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ac:	4a31      	ldr	r2, [pc, #196]	@ (8000374 <uart2_rxtx_init+0xd0>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &= ~(1U<<4);
 80002b4:	4b30      	ldr	r3, [pc, #192]	@ (8000378 <uart2_rxtx_init+0xd4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a2f      	ldr	r2, [pc, #188]	@ (8000378 <uart2_rxtx_init+0xd4>)
 80002ba:	f023 0310 	bic.w	r3, r3, #16
 80002be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<5);
 80002c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000378 <uart2_rxtx_init+0xd4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a2c      	ldr	r2, [pc, #176]	@ (8000378 <uart2_rxtx_init+0xd4>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 80002cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000378 <uart2_rxtx_init+0xd4>)
 80002ce:	6a1b      	ldr	r3, [r3, #32]
 80002d0:	4a29      	ldr	r2, [pc, #164]	@ (8000378 <uart2_rxtx_init+0xd4>)
 80002d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80002d8:	4b27      	ldr	r3, [pc, #156]	@ (8000378 <uart2_rxtx_init+0xd4>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a26      	ldr	r2, [pc, #152]	@ (8000378 <uart2_rxtx_init+0xd4>)
 80002de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80002e4:	4b24      	ldr	r3, [pc, #144]	@ (8000378 <uart2_rxtx_init+0xd4>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a23      	ldr	r2, [pc, #140]	@ (8000378 <uart2_rxtx_init+0xd4>)
 80002ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80002f0:	4b21      	ldr	r3, [pc, #132]	@ (8000378 <uart2_rxtx_init+0xd4>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a20      	ldr	r2, [pc, #128]	@ (8000378 <uart2_rxtx_init+0xd4>)
 80002f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002fa:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &= ~(1U<<6);
 80002fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <uart2_rxtx_init+0xd4>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a1d      	ldr	r2, [pc, #116]	@ (8000378 <uart2_rxtx_init+0xd4>)
 8000302:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000306:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<7);
 8000308:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <uart2_rxtx_init+0xd4>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a1a      	ldr	r2, [pc, #104]	@ (8000378 <uart2_rxtx_init+0xd4>)
 800030e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000312:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0] |= (1U<<12);
 8000314:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <uart2_rxtx_init+0xd4>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a17      	ldr	r2, [pc, #92]	@ (8000378 <uart2_rxtx_init+0xd4>)
 800031a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800031e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000320:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <uart2_rxtx_init+0xd4>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	4a14      	ldr	r2, [pc, #80]	@ (8000378 <uart2_rxtx_init+0xd4>)
 8000326:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800032a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 800032c:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <uart2_rxtx_init+0xd4>)
 800032e:	6a1b      	ldr	r3, [r3, #32]
 8000330:	4a11      	ldr	r2, [pc, #68]	@ (8000378 <uart2_rxtx_init+0xd4>)
 8000332:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000336:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 8000338:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <uart2_rxtx_init+0xd4>)
 800033a:	6a1b      	ldr	r3, [r3, #32]
 800033c:	4a0e      	ldr	r2, [pc, #56]	@ (8000378 <uart2_rxtx_init+0xd4>)
 800033e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000342:	6213      	str	r3, [r2, #32]

	/******************Configure uart module*********************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 8000344:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <uart2_rxtx_init+0xd0>)
 8000346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000348:	4a0a      	ldr	r2, [pc, #40]	@ (8000374 <uart2_rxtx_init+0xd0>)
 800034a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800034e:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baudrate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000350:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000354:	4909      	ldr	r1, [pc, #36]	@ (800037c <uart2_rxtx_init+0xd8>)
 8000356:	480a      	ldr	r0, [pc, #40]	@ (8000380 <uart2_rxtx_init+0xdc>)
 8000358:	f000 f814 	bl	8000384 <uart_set_baudrate>

	/*Configure the transfer direction */
	USART2->CR1 = (CR1_TE | CR1_RE);
 800035c:	4b08      	ldr	r3, [pc, #32]	@ (8000380 <uart2_rxtx_init+0xdc>)
 800035e:	220c      	movs	r2, #12
 8000360:	60da      	str	r2, [r3, #12]

	/*Enable the uart module */
	USART2->CR1 |= CR1_UE;
 8000362:	4b07      	ldr	r3, [pc, #28]	@ (8000380 <uart2_rxtx_init+0xdc>)
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	4a06      	ldr	r2, [pc, #24]	@ (8000380 <uart2_rxtx_init+0xdc>)
 8000368:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800036c:	60d3      	str	r3, [r2, #12]

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40023800 	.word	0x40023800
 8000378:	40020000 	.word	0x40020000
 800037c:	00f42400 	.word	0x00f42400
 8000380:	40004400 	.word	0x40004400

08000384 <uart_set_baudrate>:

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000390:	6879      	ldr	r1, [r7, #4]
 8000392:	68b8      	ldr	r0, [r7, #8]
 8000394:	f000 f808 	bl	80003a8 <compute_uart_bd>
 8000398:	4603      	mov	r3, r0
 800039a:	461a      	mov	r2, r3
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	609a      	str	r2, [r3, #8]
}
 80003a0:	bf00      	nop
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	085a      	lsrs	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	441a      	add	r2, r3
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c0:	b29b      	uxth	r3, r3
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d0:	480d      	ldr	r0, [pc, #52]	@ (8000408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d8:	480c      	ldr	r0, [pc, #48]	@ (800040c <LoopForever+0x6>)
  ldr r1, =_edata
 80003da:	490d      	ldr	r1, [pc, #52]	@ (8000410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <LoopForever+0xe>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f0:	4c0a      	ldr	r4, [pc, #40]	@ (800041c <LoopForever+0x16>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003fe:	f000 f811 	bl	8000424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000402:	f7ff ff3d 	bl	8000280 <main>

08000406 <LoopForever>:

LoopForever:
  b LoopForever
 8000406:	e7fe      	b.n	8000406 <LoopForever>
  ldr   r0, =_estack
 8000408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800040c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000410:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000414:	0800048c 	.word	0x0800048c
  ldr r2, =_sbss
 8000418:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800041c:	20000020 	.word	0x20000020

08000420 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000420:	e7fe      	b.n	8000420 <ADC_IRQHandler>
	...

08000424 <__libc_init_array>:
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	4d0d      	ldr	r5, [pc, #52]	@ (800045c <__libc_init_array+0x38>)
 8000428:	4c0d      	ldr	r4, [pc, #52]	@ (8000460 <__libc_init_array+0x3c>)
 800042a:	1b64      	subs	r4, r4, r5
 800042c:	10a4      	asrs	r4, r4, #2
 800042e:	2600      	movs	r6, #0
 8000430:	42a6      	cmp	r6, r4
 8000432:	d109      	bne.n	8000448 <__libc_init_array+0x24>
 8000434:	4d0b      	ldr	r5, [pc, #44]	@ (8000464 <__libc_init_array+0x40>)
 8000436:	4c0c      	ldr	r4, [pc, #48]	@ (8000468 <__libc_init_array+0x44>)
 8000438:	f000 f818 	bl	800046c <_init>
 800043c:	1b64      	subs	r4, r4, r5
 800043e:	10a4      	asrs	r4, r4, #2
 8000440:	2600      	movs	r6, #0
 8000442:	42a6      	cmp	r6, r4
 8000444:	d105      	bne.n	8000452 <__libc_init_array+0x2e>
 8000446:	bd70      	pop	{r4, r5, r6, pc}
 8000448:	f855 3b04 	ldr.w	r3, [r5], #4
 800044c:	4798      	blx	r3
 800044e:	3601      	adds	r6, #1
 8000450:	e7ee      	b.n	8000430 <__libc_init_array+0xc>
 8000452:	f855 3b04 	ldr.w	r3, [r5], #4
 8000456:	4798      	blx	r3
 8000458:	3601      	adds	r6, #1
 800045a:	e7f2      	b.n	8000442 <__libc_init_array+0x1e>
 800045c:	08000484 	.word	0x08000484
 8000460:	08000484 	.word	0x08000484
 8000464:	08000484 	.word	0x08000484
 8000468:	08000488 	.word	0x08000488

0800046c <_init>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr

08000478 <_fini>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	bf00      	nop
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr
